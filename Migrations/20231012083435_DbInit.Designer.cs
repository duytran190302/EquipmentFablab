// <auto-generated />
using System;
using Fablab.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fablab.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231012083435_DbInit")]
    partial class DbInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Fablab.Models.Domain.Borrow", b =>
                {
                    b.Property<Guid>("BorrowID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("BorrowedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Borrower")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OnSide")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReturnedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BorrowID");

                    b.HasIndex("ProjectName");

                    b.ToTable("Borrow");
                });

            modelBuilder.Entity("Fablab.Models.Domain.Equipment", b =>
                {
                    b.Property<Guid>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodeOfManager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EquipmentTypeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("YearOfSupply")
                        .HasColumnType("datetime2");

                    b.HasKey("EquipmentId");

                    b.HasIndex("EquipmentTypeId");

                    b.HasIndex("LocationID");

                    b.HasIndex("SupplierName");

                    b.ToTable("Equipment");
                });

            modelBuilder.Entity("Fablab.Models.Domain.EquipmentBorrow", b =>
                {
                    b.Property<Guid>("BorrowID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BorrowID", "EquipmentId");

                    b.HasIndex("EquipmentId");

                    b.ToTable("EquipmentBorrows");
                });

            modelBuilder.Entity("Fablab.Models.Domain.EquipmentType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EquipmentTypes");
                });

            modelBuilder.Entity("Fablab.Models.Domain.Location", b =>
                {
                    b.Property<string>("LocationID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationID");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Fablab.Models.Domain.Project", b =>
                {
                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectName");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Fablab.Models.Domain.Supplier", b =>
                {
                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierName");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Fablab.Models.Domain.Borrow", b =>
                {
                    b.HasOne("Fablab.Models.Domain.Project", "Project")
                        .WithMany("Borrows")
                        .HasForeignKey("ProjectName");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Fablab.Models.Domain.Equipment", b =>
                {
                    b.HasOne("Fablab.Models.Domain.EquipmentType", "EquipmentType")
                        .WithMany()
                        .HasForeignKey("EquipmentTypeId");

                    b.HasOne("Fablab.Models.Domain.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID");

                    b.HasOne("Fablab.Models.Domain.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierName");

                    b.Navigation("EquipmentType");

                    b.Navigation("Location");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Fablab.Models.Domain.EquipmentBorrow", b =>
                {
                    b.HasOne("Fablab.Models.Domain.Borrow", "Borrow")
                        .WithMany()
                        .HasForeignKey("BorrowID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fablab.Models.Domain.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Borrow");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("Fablab.Models.Domain.Project", b =>
                {
                    b.Navigation("Borrows");
                });
#pragma warning restore 612, 618
        }
    }
}
